$(document).ready(function () {
    // const webappIndicator = "webapp";
    // const daemonIndicator = "daemon";
    // const tensorflowIndicator = "tensorflow";
    // const HTTPMethod = 'http';

    const webappIndicator = "webapp-8080";
    const daemonIndicator = "daemon-9988";
    const tensorflowIndicator = "tensorflow-5001";
    const HTTPMethod = 'https';

    let neuralNetworks = new Array();
    neuralNetworks.push({ key: "shapes", type: "mlp", input: "25", hidden: "20:16:11", output: "7", framework: "tensorflow" });
    neuralNetworks.push({ key: "alphabet-mlp", type: "mlp", input: "2500", hidden: "1880:1262:645", output: "26", framework: "tensorflow" });
    neuralNetworks.push({ key: "alphabet-cnn", type: "cnn", input: "50x50x1", hidden: "50x50x4:25x25x8:12x12x12:52", output: "26", framework: "tensorflow" });

    let backendurl = HTTPMethod + '://localhost:8080';
    // let backendurl = HTTPMethod+'://'+location.hostname.replace(webappIndicator, daemonIndicator);
    let tensorflowurl = HTTPMethod + '://' + location.hostname.replace(webappIndicator, tensorflowIndicator);

    auto_login();

    let canvas = document.querySelector('#canvas');
    let context = canvas.getContext('2d');

    context.translate(0.5, 0.5);

    let neuralNetworkBuilder = new NeuralNetworkBuilder(canvas);

    let neuralNetwork = null;
    // let neuralNetwork = neuralNetworkBuilder.build("mlp");
    // neuralNetwork.addLayer(12);
    // neuralNetwork.addLayer(8);
    // neuralNetwork.addLayer(4);
    // neuralNetwork.draw();

    let nbHiddenLayers = 1;
    let currentLayer = 0;
    let merryChristmasInterval;
    let trainingInterval;
    let trainingNNs = Array();
    let frameworks = Array();
    frameworks['kerasapi'] = "Tensorflow";
    frameworks['tensorflow'] = "Tensorflow";
    frameworks['neuroph'] = "Neuroph";
    let types = Array();
    types['mlp'] = "MLP";
    types['cnn'] = "CNN";
    types['rnn'] = "RNN";

    // Ahah
    const demoShapesMap = new Map([
        ["1;1;1;1;1;1;0;0;0;1;1;0;0;0;1;1;0;0;0;1;1;1;1;1;1", 1],
        ["0;0;1;0;0;0;1;0;1;0;1;0;0;0;1;0;1;0;1;0;0;0;1;0;0", 2],
        ["0;0;1;0;0;0;0;1;0;0;1;1;1;1;1;0;0;1;0;0;0;0;1;0;0", 3],
        ["1;0;0;0;1;0;1;0;1;0;0;0;1;0;0;0;1;0;1;0;1;0;0;0;1", 4],
        ["0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;0;0;0;0;0;0;0;0;0;0", 5],
        ["0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0", 6],
        ["0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0", 7],
        ["1;0;1;1;1;1;1;0;0;1;1;0;0;1;1;1;0;0;1;1;1;0;1;1;1", 1],
        ["0;0;1;0;0;0;0;0;1;0;1;1;1;1;1;0;0;1;0;0;0;0;1;0;0", 3]
    ]);

    // :D
    const demoCharsMap = new Map([
        ["0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.792;0.945;0.949;0.796;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.694;0.961;1.0;0.996;0.969;0.71;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.867;0.988;1.0;1.0;0.996;0.867;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.698;0.953;0.996;1.0;1.0;0.996;0.941;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.875;0.98;0.996;0.996;1.0;1.0;0.969;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.839;0.976;0.992;0.98;0.984;1.0;1.0;0.976;0.757;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.812;0.961;0.992;0.973;0.898;0.929;0.992;1.0;0.992;0.863;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.812;0.965;0.988;0.976;0.867;0.686;0.812;0.984;1.0;0.996;0.933;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.776;0.961;0.996;0.973;0.867;0;0;0;0.953;0.996;0.996;0.965;0.686;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.816;0.953;0.988;0.988;0.902;0;0;0;0;0.898;0.992;1.0;0.988;0.82;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.886;0.98;0.996;0.992;0.937;0.706;0;0;0;0;0.824;0.988;1.0;0.996;0.914;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.871;0.988;1.0;1.0;0.969;0.788;0;0;0;0;0;0;0.957;0.996;0.996;0.949;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.773;0.973;0.996;1.0;0.988;0.871;0;0;0;0;0;0;0;0.882;0.992;1.0;0.976;0.761;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.925;0.992;0.992;0.984;0.886;0;0;0;0;0;0;0;0;0.8;0.984;1.0;0.992;0.875;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.859;0.98;0.992;0.969;0.851;0;0;0;0;0;0;0;0;0;0.725;0.973;1.0;0.996;0.949;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.839;0.976;0.996;0.984;0.878;0;0;0;0;0;0;0;0;0;0;0;0.941;0.996;0.996;0.961;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.812;0.976;0.996;0.996;0.969;0.839;0;0;0;0;0;0;0;0;0;0;0.725;0.922;0.992;0.996;0.98;0.816;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.949;1.0;1.0;0.996;0.984;0.949;0.918;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.929;0.965;0.992;1.0;0.996;0.937;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.8;0.988;1.0;1.0;1.0;1.0;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;1.0;1.0;1.0;0.984;0.796;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.694;0.933;0.996;1.0;1.0;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;1.0;1.0;1.0;0.996;0.898;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.929;0.988;0.996;0.988;0.957;0.937;0.922;0.914;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.922;0.961;0.996;1.0;1.0;0.957;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.878;0.992;1.0;0.988;0.906;0.706;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.753;0.945;0.996;1.0;0.976;0.741;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.686;0.965;1.0;1.0;0.969;0.741;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.761;0.973;1.0;0.988;0.867;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.855;0.988;0.996;0.996;0.922;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.847;0.984;0.992;0.969;0.776;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.945;0.996;1.0;0.98;0.8;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.929;0.992;0.996;0.949;0.69;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.722;0.965;0.996;0.996;0.933;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.831;0.984;1.0;0.992;0.89;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.867;0.988;0.996;0.976;0.788;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.718;0.976;1.0;1.0;0.973;0.714;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.706;0.965;1.0;0.984;0.871;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.929;0.996;1.0;0.988;0.871;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.867;0.988;0.996;0.953;0.686;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.808;0.984;1.0;0.996;0.953;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.949;0.996;0.988;0.875;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.929;0.996;1.0;0.965;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.808;0.98;0.996;0.976;0.741;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.824;0.984;0.996;0.961;0.686;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.992;0.992;0.918;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.922;0.988;0.933;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.957;0.996;0.976;0.8;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.835;0.71;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.933;0.988;0.914;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.722;0.839;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0", 1],
        ["0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.749;0.835;0.847;0.906;0.941;0.949;0.945;0.929;0.898;0.859;0.812;0.761;0.702;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.749;0.961;0.984;0.976;0.988;0.996;0.996;0.996;0.996;0.992;0.988;0.984;0.976;0.961;0.949;0.922;0.875;0.804;0.745;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.831;0.98;0.996;0.98;0.973;0.98;0.984;0.988;0.992;0.996;0.996;0.996;1.0;0.996;0.996;0.992;0.992;0.98;0.98;0.969;0.922;0.776;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.882;0.988;0.996;0.957;0.851;0.808;0.827;0.859;0.898;0.922;0.953;0.965;0.976;0.984;0.988;0.992;0.996;0.996;1.0;1.0;0.996;0.973;0.863;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.945;0.996;0.984;0.871;0;0;0;0;0;0;0;0.702;0.757;0.812;0.855;0.902;0.949;0.98;0.996;1.0;0.996;0.996;0.984;0.941;0.808;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.741;0.98;1.0;0.984;0.804;0;0;0;0;0;0;0;0;0;0;0;0;0;0.804;0.898;0.953;0.969;0.988;0.996;0.996;0.98;0.843;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.776;0.98;1.0;0.98;0.765;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.753;0.91;0.988;1.0;1.0;0.973;0.698;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.804;0.984;1.0;0.976;0.733;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.933;0.996;1.0;0.988;0.835;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.843;0.988;0.996;0.957;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.769;0.969;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.886;0.992;0.996;0.933;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.906;0.992;0.996;0.945;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.902;0.992;0.996;0.918;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.871;0.988;0.996;0.949;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.702;0.918;0.988;0.996;0.918;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.706;0.831;0.922;0.98;0.992;0.973;0.784;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.765;0.847;0.914;0.961;0.984;0.992;0.996;0.984;0.875;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0.686;0.737;0.745;0.741;0.769;0.804;0.863;0.902;0.925;0.957;0.976;0.988;0.996;0.996;0.996;0.988;0.965;0.867;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0.91;0.973;0.988;0.988;0.984;0.988;0.992;0.992;0.992;0.996;0.996;1.0;0.996;0.992;0.984;0.961;0.894;0.749;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0.859;0.996;1.0;1.0;1.0;1.0;1.0;1.0;1.0;1.0;0.996;0.992;0.988;0.973;0.922;0.835;0.698;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0.859;0.996;1.0;1.0;1.0;1.0;1.0;1.0;1.0;1.0;0.996;0.992;0.969;0.91;0.757;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0.91;0.976;0.992;0.996;0.996;0.996;1.0;1.0;1.0;1.0;0.996;0.992;0.969;0.831;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0.706;0.784;0.824;0.847;0.894;0.945;0.973;0.976;0.98;0.988;0.992;0.996;0.969;0.816;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0.729;0.8;0.882;0.945;0.984;0.996;0.969;0.757;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.776;0.945;0.996;0.996;0.898;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.925;0.996;0.996;0.922;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.929;0.996;0.996;0.929;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.953;0.996;0.996;0.941;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.741;0.976;1.0;1.0;0.941;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.839;0.988;1.0;0.992;0.859;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.929;0.996;0.996;0.937;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0;0.824;0.98;0.996;0.969;0.784;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0;0.733;0.941;0.992;0.988;0.898;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0;0.714;0.929;0.984;0.992;0.953;0.722;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0;0;0;0;0.788;0.925;0.992;0.992;0.961;0.792;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0;0;0.788;0.859;0.886;0.941;0.969;0.98;0.984;0.957;0.796;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0;0.831;0.933;0.98;0.992;0.988;0.996;0.996;0.996;0.945;0.776;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.91;0.996;0.996;0.91;0;0;0;0.922;0.98;0.992;0.996;0.996;0.996;0.988;0.973;0.937;0.765;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.906;0.996;0.996;0.906;0;0;0.835;0.988;0.996;0.992;0.976;0.957;0.937;0.863;0.761;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.882;0.992;0.992;0.882;0;0;0.71;0.925;0.937;0.894;0.792;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.8;0.973;0.973;0.8;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.784;0.784;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0", 2],
        ["0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.694;0.753;0.831;0.882;0.906;0.91;0.91;0.914;0.933;0.945;0.941;0.886;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.686;0.745;0.816;0.878;0.937;0.965;0.965;0.961;0.973;0.984;0.992;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.988;0.835;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.812;0.925;0.973;0.976;0.984;0.992;0.996;1.0;1.0;0.996;1.0;0.996;0.996;0.996;0.996;0.996;0.992;0.992;0.988;0.976;0.949;0.733;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.898;0.984;0.996;1.0;1.0;0.996;0.996;0.996;1.0;0.996;0.992;0.976;0.961;0.933;0.914;0.91;0.91;0.902;0.89;0.855;0.804;0.694;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.902;0.992;1.0;1.0;1.0;0.996;0.976;0.969;0.961;0.957;0.929;0.882;0.792;0.694;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.863;0.984;1.0;1.0;0.988;0.973;0.906;0.792;0.698;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.69;0.886;0.969;0.992;0.98;0.953;0.855;0.706;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.804;0.933;0.988;0.992;0.957;0.839;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.882;0.973;0.992;0.996;0.961;0.796;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.871;0.984;0.996;0.992;0.957;0.804;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.871;0.945;0.98;0.969;0.902;0.737;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.875;0.984;0.98;0.918;0.773;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.694;0.965;1.0;0.976;0.816;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.816;0.98;1.0;0.969;0.706;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.898;0.992;0.996;0.929;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.945;0.996;0.988;0.875;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.957;0.996;0.984;0.839;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.957;0.996;0.984;0.827;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.957;0.996;0.984;0.831;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.957;0.996;0.988;0.839;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.941;0.996;0.988;0.875;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.902;0.996;0.996;0.929;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.835;0.988;1.0;0.976;0.753;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.773;0.984;1.0;0.992;0.886;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.694;0.973;1.0;0.996;0.965;0.788;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.898;0.992;0.996;0.992;0.969;0.882;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.918;0.988;0.996;0.996;0.992;0.953;0.812;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.906;0.992;1.0;1.0;0.996;0.98;0.922;0.843;0.737;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.906;0.988;1.0;0.996;0.996;0.996;0.988;0.973;0.937;0.906;0.863;0.827;0.792;0.737;0.69;0;0;0;0;0;0;0;0;0;0;0.702;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.851;0.949;0.969;0.984;0.992;0.996;1.0;0.996;0.992;0.988;0.984;0.98;0.969;0.961;0.961;0.961;0.961;0.945;0.929;0.914;0.91;0.914;0.933;0.961;0.976;0.937;0.718;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.718;0.827;0.91;0.957;0.976;0.992;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;1.0;0.996;0.996;0.996;0.996;0.996;0.996;1.0;1.0;0.996;0.886;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.792;0.878;0.922;0.949;0.961;0.969;0.98;0.984;0.992;0.996;1.0;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.98;0.812;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.737;0.792;0.835;0.882;0.937;0.957;0.945;0.929;0.914;0.91;0.914;0.922;0.925;0.914;0.812;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0", 3],
        ["0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.706;0.843;0.89;0.906;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.902;0.89;0.851;0.808;0.745;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.745;0.882;0.953;0.988;0.992;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.992;0.992;0.988;0.98;0.973;0.965;0.945;0.929;0.898;0.769;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.871;0.969;0.988;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;1.0;0.996;0.996;0.992;0.949;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.761;0.929;0.988;0.996;0.996;0.988;0.957;0.922;0.914;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.914;0.933;0.949;0.965;0.98;0.984;0.992;0.996;0.992;0.949;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.8;0.961;0.992;0.996;0.98;0.937;0.867;0.729;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.722;0.784;0.831;0.89;0.914;0.898;0.769;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.8;0.961;0.992;0.992;0.965;0.855;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.82;0.961;0.988;0.98;0.929;0.776;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.824;0.969;0.996;0.969;0.871;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.804;0.969;0.996;0.973;0.835;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.718;0.957;0.996;0.98;0.863;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.859;0.988;0.996;0.949;0.71;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.902;0.996;0.996;0.933;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.906;0.996;0.996;0.918;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.894;0.992;0.996;0.933;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.847;0.992;0.996;0.973;0.851;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.702;0.953;0.996;0.992;0.969;0.91;0.816;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.792;0.965;0.992;0.996;0.992;0.98;0.945;0.922;0.914;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.902;0.871;0.788;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.769;0.933;0.988;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.992;0.984;0.961;0.898;0.741;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.851;0.922;0.973;0.988;0.992;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;1.0;0.992;0.976;0.894;0.706;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.753;0.859;0.898;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.91;0.922;0.957;0.988;0.996;1.0;1.0;0.992;0.957;0.827;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.702;0.863;0.969;0.996;1.0;1.0;0.996;0.984;0.933;0.741;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.718;0.898;0.973;0.988;0.996;1.0;0.996;0.965;0.792;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.706;0.855;0.953;0.992;1.0;0.996;0.973;0.792;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.722;0.925;0.988;1.0;0.996;0.945;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.929;0.992;0.996;0.976;0.792;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.733;0.953;0.992;0.992;0.902;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.851;0.988;0.996;0.961;0.698;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.725;0.961;0.996;0.984;0.82;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.933;0.996;0.992;0.882;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.929;0.996;0.992;0.89;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.694;0.949;0.996;0.992;0.855;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.847;0.98;0.996;0.965;0.737;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.745;0.957;0.996;0.992;0.902;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.929;0.996;1.0;0.973;0.769;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.784;0.918;0.988;1.0;0.996;0.918;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.863;0.91;0.918;0.855;0.753;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.702;0.808;0.91;0.961;0.976;0.992;0.992;0.992;0.953;0.737;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.827;0.984;0.992;0.996;0.988;0.973;0.961;0.953;0.898;0.8;0.714;0;0;0.702;0.737;0.792;0.82;0.843;0.886;0.937;0.969;0.984;0.996;1.0;1.0;0.996;0.973;0.898;0.706;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.741;0.957;0.988;0.992;0.996;0.996;0.996;1.0;0.996;0.976;0.969;0.961;0.957;0.961;0.969;0.98;0.984;0.984;0.992;0.996;1.0;1.0;1.0;1.0;0.996;0.961;0.808;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.737;0.859;0.906;0.961;0.988;0.996;1.0;1.0;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;0.996;1.0;0.996;0.984;0.969;0.898;0.722;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.702;0.851;0.933;0.969;0.976;0.984;0.984;0.984;0.984;0.984;0.98;0.969;0.965;0.961;0.957;0.957;0.953;0.902;0.8;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.69;0.745;0.8;0.824;0.827;0.824;0.816;0.792;0.737;0.698;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0", 19],
        ["0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.792;0.824;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.784;0.741;0;0;0;0;0;0;0;0;0;0;0;0;0.937;0.973;0.878;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.737;0.929;0.973;0.941;0;0;0;0;0;0;0;0;0;0;0;0;0.945;0.996;0.973;0.82;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.941;0.996;0.992;0.922;0;0;0;0;0;0;0;0;0;0;0;0;0.863;0.988;0.996;0.949;0.69;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.851;0.992;1.0;0.992;0.851;0;0;0;0;0;0;0;0;0;0;0;0;0.698;0.953;0.996;0.988;0.875;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.945;0.996;1.0;0.973;0.722;0;0;0;0;0;0;0;0;0;0;0;0;0;0.863;0.988;1.0;0.961;0;0;0;0;0;0;0;0;0;0;0;0;0;0.718;0.906;0.906;0.718;0;0;0;0;0;0;0;0;0;0;0.843;0.984;0.996;0.984;0.863;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.741;0.973;1.0;0.98;0.792;0;0;0;0;0;0;0;0;0;0;0;0;0.945;0.996;0.996;0.949;0;0;0;0;0;0;0;0;0;0.769;0.961;0.992;0.988;0.918;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.933;0.996;0.988;0.906;0;0;0;0;0;0;0;0;0;0;0;0.784;0.988;1.0;1.0;0.988;0.769;0;0;0;0;0;0;0;0;0.933;0.996;0.996;0.969;0.761;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.824;0.98;0.996;0.973;0.761;0;0;0;0;0;0;0;0;0;0;0.867;0.996;1.0;1.0;0.996;0.859;0;0;0;0;0;0;0;0.82;0.984;1.0;0.996;0.925;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.941;0.996;0.988;0.882;0;0;0;0;0;0;0;0;0;0.698;0.949;0.996;1.0;1.0;0.996;0.945;0;0;0;0;0;0;0;0.922;0.996;0.996;0.973;0.784;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.839;0.984;0.992;0.965;0.749;0;0;0;0;0;0;0;0;0.918;0.988;0.996;0.996;1.0;1.0;0.992;0.886;0;0;0;0;0;0.737;0.976;1.0;0.988;0.875;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.925;0.992;0.988;0.914;0;0;0;0;0;0;0;0.91;0.992;1.0;0.988;0.976;0.992;1.0;1.0;0.976;0.741;0;0;0;0;0.871;0.992;0.996;0.973;0.725;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.792;0.976;0.996;0.98;0.827;0;0;0;0;0;0.867;0.992;1.0;1.0;0.969;0.878;0.945;0.996;1.0;0.996;0.898;0;0;0;0;0.945;0.996;0.996;0.953;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.929;0.996;0.996;0.933;0;0;0;0;0.753;0.973;1.0;1.0;0.996;0.882;0;0.788;0.98;1.0;1.0;0.973;0.725;0;0;0.69;0.973;1.0;0.996;0.949;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.808;0.976;0.992;0.965;0.757;0;0;0;0.906;0.996;1.0;0.996;0.937;0;0;0;0.875;0.992;1.0;0.992;0.882;0;0;0.71;0.973;1.0;0.996;0.914;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.925;0.992;0.988;0.925;0;0;0.71;0.973;1.0;1.0;0.973;0.761;0;0;0;0;0.933;0.996;0.996;0.965;0.71;0;0.757;0.973;0.996;0.992;0.878;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.827;0.984;1.0;0.988;0.871;0;0.827;0.988;1.0;0.992;0.89;0;0;0;0;0;0.835;0.988;1.0;0.988;0.898;0.718;0.863;0.988;1.0;0.984;0.808;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.698;0.965;1.0;0.996;0.965;0.843;0.906;0.988;0.996;0.969;0.729;0;0;0;0;0;0.69;0.969;1.0;0.996;0.984;0.925;0.953;0.996;1.0;0.98;0.741;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.871;0.988;0.996;0.992;0.961;0.969;0.996;0.992;0.91;0;0;0;0;0;0;0;0.875;0.992;1.0;1.0;0.988;0.988;1.0;0.996;0.957;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.918;0.992;1.0;0.996;0.996;0.996;0.984;0.82;0;0;0;0;0;0;0;0;0.922;0.992;1.0;0.996;1.0;1.0;0.988;0.851;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.784;0.984;1.0;1.0;1.0;0.996;0.969;0.702;0;0;0;0;0;0;0;0;0;0.937;0.996;1.0;1.0;0.996;0.945;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.933;0.996;1.0;1.0;1.0;0.953;0;0;0;0;0;0;0;0;0;0;0.773;0.984;1.0;1.0;0.988;0.839;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.729;0.965;0.996;1.0;0.996;0.906;0;0;0;0;0;0;0;0;0;0;0;0.886;0.992;1.0;0.961;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0.737;0.933;0.976;0.937;0.71;0;0;0;0;0;0;0;0;0;0;0;0;0.831;0.91;0.753;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0", 23],

    ]);

    function init() {
        let email = 'xxx';
        if (email !== "" && email !== "/") {
            load_neuralnetworks(email);
            if (neuralNetwork != null) {
                neuralNetwork.draw();
            }
        }
    }

    function addInArray(val, array) {
        if (array.indexOf(val) === -1) {
            array.push(val);
        }
    }

    function fallbackCopyTextToClipboard(text) {
        let textArea = document.createElement("textarea");
        textArea.style.position = "absolute";
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        try {
            let successful = document.execCommand('copy');
            let msg = successful ? 'successful' : 'unsuccessful';
            console.log('Fallback: Copying text command was ' + msg);
        } catch (err) {
            console.error('Fallback: Oops, unable to copy', err);
        }
        document.body.removeChild(textArea);
    }

    function copyTextToClipboard(text) {
        if (!navigator.clipboard) {
            fallbackCopyTextToClipboard(text);
            return;
        }
        navigator.clipboard.writeText(text).then(function () {
            console.log('Async: Copying to clipboard was successful!');
        }, function (err) {
            console.error('Async: Could not copy text: ', err);
        });
    }

    function removeFromArray(val, array) {
        let val_index = array.indexOf(val);
        if (val_index > -1) {
            array.splice(val_index, 1);
        }
    }

    $('.create_button').click(function () {
        let nntype = $(this).attr('nntype');
        neuralNetwork = neuralNetworkBuilder.build(nntype);

        if (nntype === "mlp") {

            let nbInputNeurons = $('#nbInputNeurons').val();
            neuralNetwork.addLayer(nbInputNeurons);

            $("#hiddenLayers .hiddenLayer").each(function (index) {
                let nbHiddenNeurons = $(this).val();
                neuralNetwork.addLayer(nbHiddenNeurons);
            });

            let nbOutputNeurons = $('#nbOutputNeurons').val();
            neuralNetwork.addLayer(nbOutputNeurons);

        }
        else if (nntype === "cnn") {

            let nbInputNeurons_splitted = $('#nbInputNeurons_cnn').val().split('x');
            console.log(nbInputNeurons_splitted);
            neuralNetwork.addLayer(nbInputNeurons_splitted[0], nbInputNeurons_splitted[1], 1);

            neuralNetwork.addLayer(Math.ceil(nbInputNeurons_splitted[0] / 2), Math.ceil(nbInputNeurons_splitted[1] / 2), 2);
            neuralNetwork.addLayer(Math.ceil(nbInputNeurons_splitted[0] / 4), Math.ceil(nbInputNeurons_splitted[1] / 4), 4);
            neuralNetwork.addLayer(Math.ceil(nbInputNeurons_splitted[0] / 8), Math.ceil(nbInputNeurons_splitted[1] / 8), 8);

            let nbOutputNeurons = $('#nbOutputNeurons_cnn').val();
            neuralNetwork.addLayer(nbOutputNeurons);

        }

        document.getElementById('canvas').setAttribute('height', neuralNetwork.getNbLayers() * 150);
        neuralNetwork.draw();
    });

    function regenerateHiddenLayersInputs(addOrRemove) {
        let html = "";
        nbHiddenLayers = 0;
        let values = Array();
        $("#moreLayers .hiddenLayer").each(function (index) {
            nbHiddenLayers++;
            values.push($(this).val());
        });
        for (let i = 0; i < nbHiddenLayers + addOrRemove; i++) {
            let value = "";
            if (i < values.length) {
                value = values[i];
            }
            html += '<span class="badge badge-primary">Hidden layer ' + (i + 2) + '</span>' +
                '<input type="text" class="form-control hiddenLayer" placeholder="Nb hidden neurons" value="' + value + '">';
        }
        return html;
    }

    $('#addLayer_button').click(function () {
        let html = "";
        html += regenerateHiddenLayersInputs(1);
        if (nbHiddenLayers === 0) {
            $('#firstHiddenLayerBadge').html("Hidden layer 1");
        }
        $('#removeLayer_button').show();
        $('#moreLayers').html(html);
    });

    $('#removeLayer_button').click(function () {
        let html = "";
        html += regenerateHiddenLayersInputs(-1);
        if (nbHiddenLayers === 1) {
            $('#firstHiddenLayerBadge').html("Hidden layer");
            $('#removeLayer_button').hide();
        }
        $('#moreLayers').html(html);
        document.getElementById('menu').style.webkitTransform = 'scale(1)';
    });


    $('#add_user_button').click(function () {
        let html = "";
        let email = $('#form-email-add').val();
        let pwd = $('#form-pwd-add').val();
        let pwd2 = $('#form-pwd2-add').val();
        if (pwd === pwd2) {
            $.post(backendurl + '/service/createuser', { email: email, pwd: pwd },
                function (data) {
                    if (data === "taken") {
                        alert("This e-mail is already taken");
                    }
                    else {
                        $('#modal_signup_content').fadeOut(500, function () {
                            $('#modal_signup_content').html("Account successfully created!");
                            $('#modal_signup_content').fadeIn(500);
                        });
                    }
                }).fail(function () {
                    alert("Error: The server isn't responding");
                });
        }
        else {
            alert("Password doesn't match with the confirmation");
        }
    });

    function load_neuralnetworks(email) {
        $('#addnn_button').fadeIn(250);
        /*if(email !== "") {neuralNetwork
                $.post(backendurl+'/service/getusernns', { email: email },
                  function(data) {
                    let json = jQuery.parseJSON(data);*/
        let json = neuralNetworks;
        let html = "";
        $.each(json, function () {
            html += '<div id="' + this.key + '" ' +
                'neurons="' + this.input + '*' + this.hidden + '*' + this.output + '" ' +
                'nntype="' + this.type + '" ' +
                'framework="' + this.framework + '" ' +
                'class="btn btn-outline-primary neuralnetwork_menu_home">' +
                this.key +
                '<div class="nn_remove" nnid="' + this.key + '" data-toggle="modal" data-target="#removennmodal"><i class="fa fa-trash fa-1x icon"></i></div>' +
                '<div class="nn_edit" nnid="' + this.key + '"><i class="fa fa-cog fa-1x icon"></i></div>' +
                '</div>';
        });
        $('#neuralnetworks_menu_home').hide();
        $('#neuralnetworks_menu_home').html(html);
        $('#neuralnetworks_menu_home').fadeIn(250);

        $('.neuralnetwork_menu_home').click(function () {
            let nntype = $(this).attr('nntype');
            let neuronslayers = $(this).attr('neurons').split('*');

            neuralNetwork = neuralNetworkBuilder.build(nntype);

            let neuronslayers_splitted = neuronslayers[0].split('x');

            neuralNetwork.addLayer(neuronslayers_splitted[0], neuronslayers_splitted[1], neuronslayers_splitted[2]);

            let hiddenLayers = neuronslayers[1].split(":");
            for (let i = 0; i < hiddenLayers.length; i++) {
                let hiddenLayers_splitted = hiddenLayers[i].split('x');

                if (hiddenLayers_splitted.length === 3) {
                    neuralNetwork.addLayer(hiddenLayers_splitted[0], hiddenLayers_splitted[1], hiddenLayers_splitted[2]);
                } else {
                    neuralNetwork.addLayer(hiddenLayers_splitted[0]);
                }

            }

            neuralNetwork.addLayer(neuronslayers[2]);

            document.getElementById('canvas').setAttribute('height', neuralNetwork.getNbLayers() * 160);
            neuralNetwork.draw();
        });

        $('.nn_edit').click(function () {
            let id = $(this).attr('nnid');
            let email = $('#session_login').val();
            let nn_desc_div = $(this);

            /*$.post(backendurl + '/service/getstatus', { id: id, email: email },
                function (data) {*/
            const data = "new";
            if (data === "trained") {
                nn_trained(id, true);
            }
            else {
                let currentnn = $('#currentnn');
                let neurons_txt = nn_desc_div.parent().attr('neurons');
                let neurons_layers = neurons_txt.split("*");
                currentnn.attr('neurons', neurons_txt);
                currentnn.html(id);
                let framework = nn_desc_div.parent().attr('framework');
                let nntype = nn_desc_div.parent().attr('nntype');
                currentnn.attr('framework', framework);
                currentnn.attr('nntype', nntype);
                $('#currentnn_framework').html(types[nntype] + " - " + frameworks[framework]);
                let on_html = '<div id="output_neurons_menu_container">';
                for (let i = 0; i < neurons_layers[2]; i++) {
                    on_html += '<div class="output_neuron_menu">' +
                        '<div class="output_neuron_label">' + (i + 1) + '</div>' +
                        '<input type="text" id="outputNeuron_' + (i + 1) +
                        '" class="form-control input_text_menu outputNeuron_label"' +
                        ' placeholder="Output ' + (i + 1) + '">' +
                        '</div>';
                }
                on_html += '</div>';
                $('#menu_home').fadeOut(250, function () {
                    $('#form_create_dataset_nnid').val(id);
                    $('#menu_nn_output_neurons').html(on_html);
                    $('#train_button').attr('nnid', id);
                    $('#menu_nn').fadeIn(250);
                });

                if (data === "training") {
                    $('#loading').show();
                    trainingInterval = setInterval(function () { training(id); }, 1000);
                }

            }
            /*}).fail(function () {
                alert("Error: The server isn't responding");
            });*/

        });

        $('.nn_remove').click(function () {
            let id = $(this).attr('nnid');
            $('#removennlabel_id').html(id);
            $('#removennlabel_id_hidden').val(id);
        });

        /*     }).fail(function() {
                 alert("Error: The server isn't responding");
             });
         }*/

    }

    function auto_login() {
        /*let emailCookie = getCookie("email")
        let pwdCookie = getCookie("pwd")
        //console.log(emailCookie+" "+pwdCookie);
        if(emailCookie && pwdCookie) {
            $.post(backendurl+'/service/login', { email: emailCookie, pwd: pwdCookie, newsession: false },
                function(data) {
                    console.log(data);
                    let json = jQuery.parseJSON(data);
                    if(json.status === "auth_success") {
                        after_login(emailCookie, pwdCookie, json.session, false);
                    }
                    else {
                        if(json.status === "doesntexist") {
                            console.log("Auto login: This e-mail doesn't exist");
                        }
                        else if(json.status === "auth_error")  {
                            console.log("Auto login: Wrong password");
                        }
                        else {
                            console.log("Auto login: Internal error");
                        }
                    }
                }).fail(function() {
                    $('#nlogged').show();
                });
        }
        else {
            $('#nlogged').show();
        }*/
        let email = 'xxx';
        $('#nlogged').fadeOut(0, function () {
            $('#logged_label_login').html(email);
            $('#session_login').val(email);
            $('#form_create_dataset_login').val(email);
            $('#logged').fadeIn(0);
        });
        load_neuralnetworks(email);
    }

    /*function after_login(email, pwd, session, newSession) {
        let emailCookie = getCookie("email");
        let pwdCookie = getCookie("pwd")
        if(!emailCookie || !pwdCookie) {
            setCookie("email", email, 1);
            setCookie("pwd", pwd, 1);
        }
        let fadingTime = newSession ? 500 : 0; 
        $('#session_id').val(session);
        $('#nlogged').fadeOut(fadingTime, function() {
            $('#logged_label_login').html(email);
            $('#session_login').val(email);
            $('#form_create_dataset_login').val(email);
            $('#logged').fadeIn(fadingTime);
        });
        load_neuralnetworks(email);
    }*/

    $('#login_button').click(function () {
        let email = $('#login').val();
        let pwd = $('#password').val();
        $.post(backendurl + '/service/login', { email: email, pwd: pwd, newsession: 'true' },
            function (data) {
                console.log(data);
                let json = jQuery.parseJSON(data);
                if (json.status === "doesntexist") {
                    alert("This e-mail doesn't exist");
                }
                else {
                    if (json.status === "auth_success") {
                        after_login(email, pwd, json.session, true);
                    }
                    else if (json.status === "auth_error") {
                        alert("Wrong password");
                    }
                    else {
                        alert("Internal error");
                    }
                }
            }).fail(function () {
                alert("Error: The server isn't responding");
            });
    });

    $('#logout_button').click(function () {
        delete_cookie("email", "/", location.hostname);
        delete_cookie("pwd", "/", location.hostname);
        location.reload();
    });

    $('.chosenn_button').click(function () {
        let self = $(this);
        $('#menu_chosenn').fadeOut(250, function () {
            $('#menu_create_' + self.attr('nntype')).fadeIn(250);
        });
    });

    $('#addnn_button').click(function () {
        $('#menu_home').fadeOut(250, function () {
            $('#menu_chosenn').fadeIn(250);
        });
    });

    $('#validate_creation_button').click(function () {
        let inputsToCheck = {
            "nbInputNeurons": "Input neurons",
            "nbHiddenNeurons": "Hidden neurons",
            "nbOutputNeurons": "Output neurons",
            "nnid": "Neural network ID"
        };
        let errors = "";
        for (let key in inputsToCheck) {
            if ($('#' + key).val() === "") {
                errors += inputsToCheck[key] + ", ";
            }
        }

        if (errors.length > 0) {
            errors = errors.substring(0, errors.length - 2);
            alert("Error: some required inputs are missing: " + errors);
        }
        else {
            let hiddenLayers = $('#nbHiddenNeurons').val();
            $("#moreLayers .hiddenLayer").each(function (index) {
                hiddenLayers += ":" + $(this).val();
            });

            /*$.post(backendurl + '/service/create', {
                input: $('#nbInputNeurons').val(),
                hidden: hiddenLayers, output: $('#nbOutputNeurons').val(),
                id: $('#nnid').val(), type: $('#nntype').val(),
                framework: $('#nnframework').val(), email: $('#session_login').val()
            },
                function (data) {
                    //console.log(data);
                    location.reload();
                }).fail(function () {
                    alert("Error: The server isn't responding");
                });*/
            neuralNetworks.push({ key: $('#nnid').val(), type: $('#nntype').val(), input: $('#nbInputNeurons').val(), hidden: hiddenLayers, output: $('#nbOutputNeurons').val(), framework: $('#nnframework').val() });
            console.log(neuralNetworks);
        }
    });

    $('.home').click(function () {
        $('#menu_nn').hide();
        $('#menu_nn_trained').hide();
        $('#menu_create_mlp').fadeOut(250, function () {
            $('#menu_home').fadeIn(250);
            load_neuralnetworks('xxx');
        });
    });

    $('#upload_input').click(function () {
        $('#upload_csv').trigger("click");
    });

    $('#create_dataset').click(function (data) {
        if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {
            console.error('The File APIs are not fully supported in this browser.');
            return;
        }
        input = document.getElementById('upload_csv');
        if (!input.files) {
            console.error("This browser doesn't seem to support the `files` property of file inputs.");
        }
        else if (!input.files[0]) {
            console.error("Please select a file before clicking 'Load'");
        }
        else {
            file = input.files[0];
            fr = new FileReader();
            fr.readAsText(file);
            fr.onload = function (e) {
                let user = document.getElementById('form_create_dataset_login').value.split('@')[0];
                let nnid = document.getElementById('form_create_dataset_nnid').value;
                let fileName = user + "." + nnid + ".csv";
                /*$.post(tensorflowurl + '/upload', { filename: fileName, content: fr.result },
                    function (data) {
                        if (data.upload === "success") {
                            alert("Training file successfully uploaded");
                        }
                        else {
                            console.error('Unable to send training file to deep learning engine');
                        }
                    }).fail(function () {
                        alert("Error: The server isn't responding");
                    });*/
                alert("Dataset successfully uploaded");
            };
        }
    });

    $('#remove_nn_button_no').click(function () {
        $('#removennmodal').modal('toggle');
    });

    $('#remove_nn_button_yes').click(function () {
        /* $.post(backendurl + '/service/removenn', {
             id: $('#removennlabel_id_hidden').val(),
             email: $('#form_create_dataset_login').val()
         },
             function (data) {
                 location.reload();
             }).fail(function () {
                 alert("Error: The server isn't responding");
             });*/
        neuralNetworks = neuralNetworks.filter(nn => nn.key !== $('#removennlabel_id_hidden').val());
        load_neuralnetworks();
    });

    let mc_endLayer = false;
    let mc_nbTries = 0;
    let mc_previousNeuronToDisable = null;

    function yohoho(output) {
        if (neuralNetwork.status === "predicting") {
            if (!mc_endLayer) {
                mc_endLayer = neuralNetwork.activateLayerNextNeuron(currentLayer) ? false : true;
            }
            else if (mc_nbTries < 20) {
                if (mc_previousNeuronToDisable != null) {
                    mc_previousNeuronToDisable.disable();
                } else {
                    neuralNetwork.layers[currentLayer].neurons[0].disable();
                }
                let randomNumber = Math.floor(Math.random() * (neuralNetwork.layers[currentLayer].neurons.length - 1) + 1);
                let currentNeuronToActivate = neuralNetwork.layers[currentLayer].neurons[randomNumber];
                currentNeuronToActivate.activate();
                mc_previousNeuronToDisable = currentNeuronToActivate;
                mc_nbTries++
            }
            else {
                mc_nbTries = 0;
                mc_endLayer = false;
                mc_previousNeuronToDisable = null;
                if (currentLayer < neuralNetwork.getNbLayers() - 2) {
                    neuralNetwork.disableLayer(currentLayer);
                    currentLayer++;
                }
                else {
                    clearInterval(merryChristmasInterval);
                    neuralNetwork.disableLayer(currentLayer);
                    neuralNetwork.activateOutputNeuron(output);
                    neuralNetwork.status = "ready";
                    currentLayer = 0;
                }
            }
            neuralNetwork.draw();
        }
    }

    function merryChristmas(interval, output) {
        //console.log(neuralNetwork.status);
        if (!neuralNetwork.isContracted()) {
            if (neuralNetwork.status !== "predicting") {
                neuralNetwork.status = "predicting";
                neuralNetwork.disableLayer(neuralNetwork.getNbLayers() - 1);
                merryChristmasInterval = setInterval(function () { yohoho(output); }, interval);
            }
        }
        else {
            neuralNetwork.activateOutputNeuron(output);
            neuralNetwork.draw();
        }
        //console.log("Neural network result: "+output);
    }

    function nn_trained(id, already_trained) {
        removeFromArray(id, trainingNNs);
        let currentnn = already_trained ? $('#' + id) : $('#currentnn');
        let currentnn_trained = $('#currentnn_trained');
        let currentnn_trained_framework = $('#currentnn_trained_framework');
        let neurons_txt = currentnn.attr('neurons');
        let neurons_layers = neurons_txt.split("*");
        let currentnn_framework = currentnn.attr('framework');
        let currentnn_type = currentnn.attr('nntype');
        currentnn_trained.attr('neurons', neurons_txt);
        currentnn_trained.html(id);
        currentnn_trained_framework.html(types[currentnn_type] + " - " + frameworks[currentnn_framework]);
        let in_html = '<div id="input_neurons_menu_container">';
        for (let i = 0; i < neurons_layers[0]; i++) {
            in_html += '<div class="input_neuron_menu">' +
                '<div class="input_neuron_label">' + (i + 1) + '</div>' +
                '<input type="text" id="inputNeuron_value_' + (i + 1) +
                '" class="form-control input_text_menu inputNeuron_value"' +
                ' inputindex="' + i + '"' +
                ' placeholder="Input ' + (i + 1) + '">' +
                '</div>';
        }
        in_html += '</div>';
        let menu_id = already_trained ? 'menu_home' : 'menu_nn';
        $('#' + menu_id).fadeOut(250, function () {
            $('#form_create_dataset_nnid').val(id);
            $('#get_prediction_button').attr('nnid', id);
            $('#gen_url_button').attr('nnid', id);
            $('#menu_nn_input_neurons_values').html(in_html);
            $('#input_neurons_line').attr('nbinputs', neurons_layers[0]);
            $(".outputNeuron_label").each(function (index) {
                neuralNetwork.layers[neuralNetwork.getNbLayers() - 1].neurons[index].value = $(this).val();
            });
            neuralNetwork.draw();
            $('#menu_nn_trained').fadeIn(250);

            $(".inputNeuron_value").keyup(function () {
                neuralNetwork.layers[0].neurons[$(this).attr('inputindex')].value = $(this).val();
                neuralNetwork.draw();
            });
            demo();
        });
    }

    async function training(id) {
        /*let email = $('#session_login').val();
        $.post(backendurl + '/service/getstatus', { id: id, email: email },
            function (data) {
                if (data === "trained") {
                    clearInterval(trainingInterval);
                    $('#loading').fadeOut(500);
                    nn_trained(id, false);
                }
            }).fail(function () {
                alert("Error: The server isn't responding");
            });*/
        await new Promise(r => setTimeout(r, 1000));
        clearInterval(trainingInterval);
        $('#loading').fadeOut(500);
        nn_trained(id, false);
    }

    $('#train_button').click(function () {
        let id = $('#form_create_dataset_nnid').val();
        if (trainingNNs.indexOf(id) === -1) {
            /*$.post(backendurl + '/service/train', { id: id, email: $('#session_login').val() },
                function (data) {*/
            const data = 'ready';
            if (data === "ready") {
                addInArray(id, trainingNNs);
                $('#loading').fadeIn(500);
                trainingInterval = setInterval(function () { training(id); }, 1000);
            }
            else {
                alert(data);
            }
            /* }).fail(function () {
                 alert("Error: The server isn't responding");
             });*/
        }
    });

    $('#get_prediction_button').click(function () {
        let id = $(this).attr('nnid');
        let email = $('#session_login').val();
        let input = "";
        $(".inputNeuron_value").each(function (index) {
            if ($(this).val() != "") {
                input += $(this).val().trim() + ";";
            }
        });
        input = input.slice(0, -1);
        let fileName = email.split('@')[0] + "." + id + ".input.csv";
        /*$.post(tensorflowurl + '/upload', { filename: fileName, content: input },
            function (data) {*/
        // if (data.upload === "success") {
        /* $.post(backendurl + '/service/getprediction', { id: id, email: email, input: input },
             function (data) {*/
        // TODODO
        let data = 1;
        if (id === 'shapes') {
            const res = demoShapesMap.get(input);
            data = res == null ? 1 : demoShapesMap.get(input);
        } else if (id === 'alphabet-mlp') {
            console.log(input);
            const res = demoCharsMap.get(input);
            data = res == null ? 1 : demoCharsMap.get(input);
        }

        if (data === "notfound" || data === "nottrained") {
            alert("Error: a problem occured during the training");
        }
        else if (data === "badinput") {
            alert("Error: wrong input number");
        }
        else {
            let outputNeuron = parseInt(data);
            console.log("Neural network prediction: " + outputNeuron);
            merryChristmas(50, outputNeuron - 1);
            //neuralNetwork.activateOutputNeuron(2);
            //neuralNetwork.activateOutputNeuron(outputNeuron-1);
            //drawNeuralNetwork();
        }
        // });
        /* }
         else {
             console.error('Unable to send input to deep learning engine');
         }*/
        /* }).fail(function () {
             alert("Error: The server isn't responding");
         });*/
    });

    $('#gen_url_button').click(function () {
        let path_splitted = window.location.href.split("//")[1].split("/");
        let protocol = window.location.href.split("://")[0];
        let ip = path_splitted[0];
        let byonnd = path_splitted[1];
        let id = $(this).attr('nnid');
        let email = $('#session_login').val();
        let input = "";
        $(".inputNeuron_value").each(function (index) {
            if ($(this).val() != "") {
                input += $(this).val().trim() + ";";
            }
        });
        input = input.slice(0, -1);
        let url = protocol + "://" + ip + "/" + byonnd + "/service/getprediction?id=" + id + "&email=" + email + "&input=" + input;
        $('#generated_url_text').val(url);
        $('footer').fadeIn(500);
    });

    $('#generated_url_copy_button').click(function () {
        copyTextToClipboard($('#generated_url_text').val());
    });

    $('#generated_url_close').click(function () {
        $('footer').fadeOut(500);
    });

    function displayNeuronDesc(neuron) {
        if (neuron.value.length > 1) {
            let desc = $('#neuron_desc');
            desc.html(neuron.value);
            desc.css('left', neuron.x - neuron.radius * 2 + canvas.offsetLeft);
            desc.css('top', neuron.y - neuron.radius * 2 + canvas.offsetTop);
            desc.show();
        }
    }

    /*$("#canvas").mousemove(function(event) {
        let mouseX = event.pageX-canvas.offsetLeft;
        let mouseY = event.pageY-canvas.offsetTop;
        if(neuralNetwork != null) {
            let i = neuralNetwork.layers.length-1;
            for(let j = 0; j < neuralNetwork.layers[i].neurons.length; j++) {
                if(neuralNetwork.layers[i].neurons[j].collision(mouseX, mouseY) && !neuralNetwork.layers[i].neurons[j].hovered) {
                    neuralNetwork.layers[i].neurons[j].hovered = true;
                    displayNeuronDesc(neuralNetwork.layers[i].neurons[j]);
                }
                else if(!neuralNetwork.layers[i].neurons[j].collision(mouseX, mouseY) && neuralNetwork.layers[i].neurons[j].hovered) {
                    neuralNetwork.layers[i].neurons[j].hovered = false;
                    $('#neuron_desc').hide();
                }
            }
        }
    });*/

    $('#input_neurons_line').keyup(function () {
        let line = $(this).val();
        let nbInputs = $(this).attr('nbinputs');
        let inputs = line.split('\t');
        if (nbInputs != inputs.length) {
            inputs = line.split(';');
        }
        if (nbInputs == inputs.length && neuralNetwork != null) {
            $(".inputNeuron_value").each(function (index) {
                $(this).val(inputs[index]);
                if (!neuralNetwork.isContracted()) {
                    neuralNetwork.layers[0].neurons[index].value = inputs[index];
                    neuralNetwork.draw();
                }
            });
        }
    });

    function isInEllipse(x, y) {
        let dx = x - cx;
        let dy = y - cy;
        return ((dx * dx) / (a * a) + (dy * dy) / (b * b) <= 1);
    }

    function setCookie(name, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }

    function getCookie(name) {
        var value = "; " + document.cookie;
        var parts = value.split("; " + name + "=");
        if (parts.length == 2) {
            return parts.pop().split(";").shift();
        }
    }

    // function delete_cookie(name) {
    //     document.cookie = name+'=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; domain='+location.hostname
    // }

    function delete_cookie(name) {
        document.cookie = name + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
    }

    function demo() {
        let currentnn = $('#currentnn').html() != "" ? $('#currentnn').html() : $('#currentnn_trained').html();
        if (currentnn === "chars" || currentnn === "charstf" || currentnn === "charsapi" || currentnn === "alphabet" || currentnn === "alphabet-mlp" || currentnn === "alphabet-cnn") {
            let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            for (let i = 0; i < alphabet.length; i++) {
                neuralNetwork.layers[neuralNetwork.getNbLayers() - 1].neurons[i].value = alphabet[i];
            }
            $('#tester').html('<li class="nav-item"><a class="nav-link" href="demo/chars/" target="_blank">Test</a></li>');
        }
        else if (currentnn === "shapes" || currentnn === "shapestf" || currentnn === "shapesapi") {
            let shapes = ["Square", "Rhombus", "Right cross", "Diagonal cross", "Horizontal line", "Vertical line", "Dot"];
            for (let i = 0; i < shapes.length; i++) {
                neuralNetwork.layers[neuralNetwork.getNbLayers() - 1].neurons[i].value = shapes[i];
            }
            $('#tester').html('<li class="nav-item"><a class="nav-link" href="demo/shapes/" target="_blank">Test</a></li>');
        }
        neuralNetwork.draw();
    }

    init();

});
